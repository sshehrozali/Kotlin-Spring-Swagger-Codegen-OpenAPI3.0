/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api

import io.swagger.annotations.Authorization
import io.swagger.model.Order
import javax.validation.constraints.Max
import javax.validation.constraints.Min

@Generated(value = ["io.swagger.codegen.languages.SpringCodegen"], date = "2022-06-30T07:35:56.931Z")
@Validated
@Api(value = "store", description = "the store API")
@RequestMapping(value = ["/v2"])
interface StoreApi {
    @ApiOperation(
        value = "Delete purchase order by ID",
        nickname = "deleteOrder",
        notes = "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
        tags = ["store"]
    )
    @ApiResponses(
        value = [ApiResponse(code = 400, message = "Invalid ID supplied"), ApiResponse(
            code = 404,
            message = "Order not found"
        )]
    )
    @RequestMapping(
        value = ["/store/order/{orderId}"],
        produces = ["application/xml", "application/json"],
        method = [RequestMethod.DELETE]
    )
    fun deleteOrder(
        @Min(1L) @ApiParam(
            value = "ID of the order that needs to be deleted",
            required = true
        ) @PathVariable("orderId") orderId: Long?
    ): ResponseEntity<Void?>

    @get:RequestMapping(value = ["/store/inventory"], produces = ["application/json"], method = [RequestMethod.GET])
    @get:ApiResponses(
        value = [ApiResponse(
            code = 200,
            message = "successful operation",
            response = Map::class,
            responseContainer = "Map"
        )]
    )
    @get:ApiOperation(
        value = "Returns pet inventories by status",
        nickname = "getInventory",
        notes = "Returns a map of status codes to quantities",
        response = Integer::class,
        responseContainer = "Map",
        authorizations = [Authorization(value = "api_key")],
        tags = ["store"]
    )
    val inventory: ResponseEntity<Map<String?, Integer?>?>

    @ApiOperation(
        value = "Find purchase order by ID",
        nickname = "getOrderById",
        notes = "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions",
        response = Order::class,
        tags = ["store"]
    )
    @ApiResponses(
        value = [ApiResponse(
            code = 200,
            message = "successful operation",
            response = Order::class
        ), ApiResponse(code = 400, message = "Invalid ID supplied"), ApiResponse(
            code = 404,
            message = "Order not found"
        )]
    )
    @RequestMapping(
        value = ["/store/order/{orderId}"],
        produces = ["application/xml", "application/json"],
        method = [RequestMethod.GET]
    )
    fun getOrderById(
        @Min(1L) @Max(10L) @ApiParam(
            value = "ID of pet that needs to be fetched",
            required = true
        ) @PathVariable("orderId") orderId: Long?
    ): ResponseEntity<Order?>

    @ApiOperation(
        value = "Place an order for a pet",
        nickname = "placeOrder",
        notes = "",
        response = Order::class,
        tags = ["store"]
    )
    @ApiResponses(
        value = [ApiResponse(
            code = 200,
            message = "successful operation",
            response = Order::class
        ), ApiResponse(code = 400, message = "Invalid Order")]
    )
    @RequestMapping(
        value = ["/store/order"],
        produces = ["application/xml", "application/json"],
        method = [RequestMethod.POST]
    )
    fun placeOrder(
        @ApiParam(
            value = "order placed for purchasing the pet",
            required = true
        ) @Valid @RequestBody body: Order?
    ): ResponseEntity<Order?>
}