/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api

import io.swagger.model.User
import javax.validation.constraints.NotNull

@Generated(value = ["io.swagger.codegen.languages.SpringCodegen"], date = "2022-06-30T07:35:56.931Z")
@Validated
@Api(value = "user", description = "the user API")
@RequestMapping(value = ["/v2"])
interface UserApi {
    @ApiOperation(
        value = "Create user",
        nickname = "createUser",
        notes = "This can only be done by the logged in user.",
        tags = ["user"]
    )
    @ApiResponses(value = [ApiResponse(code = 200, message = "successful operation")])
    @RequestMapping(
        value = ["/user"],
        produces = ["application/xml", "application/json"],
        method = [RequestMethod.POST]
    )
    fun createUser(
        @ApiParam(
            value = "Created user object",
            required = true
        ) @Valid @RequestBody body: User?
    ): ResponseEntity<Void?>

    @ApiOperation(
        value = "Creates list of users with given input array",
        nickname = "createUsersWithArrayInput",
        notes = "",
        tags = ["user"]
    )
    @ApiResponses(value = [ApiResponse(code = 200, message = "successful operation")])
    @RequestMapping(
        value = ["/user/createWithArray"],
        produces = ["application/xml", "application/json"],
        method = [RequestMethod.POST]
    )
    fun createUsersWithArrayInput(
        @ApiParam(
            value = "List of user object",
            required = true
        ) @Valid @RequestBody body: List<User?>?
    ): ResponseEntity<Void?>

    @ApiOperation(
        value = "Creates list of users with given input array",
        nickname = "createUsersWithListInput",
        notes = "",
        tags = ["user"]
    )
    @ApiResponses(value = [ApiResponse(code = 200, message = "successful operation")])
    @RequestMapping(
        value = ["/user/createWithList"],
        produces = ["application/xml", "application/json"],
        method = [RequestMethod.POST]
    )
    fun createUsersWithListInput(
        @ApiParam(
            value = "List of user object",
            required = true
        ) @Valid @RequestBody body: List<User?>?
    ): ResponseEntity<Void?>

    @ApiOperation(
        value = "Delete user",
        nickname = "deleteUser",
        notes = "This can only be done by the logged in user.",
        tags = ["user"]
    )
    @ApiResponses(
        value = [ApiResponse(code = 400, message = "Invalid username supplied"), ApiResponse(
            code = 404,
            message = "User not found"
        )]
    )
    @RequestMapping(
        value = ["/user/{username}"],
        produces = ["application/xml", "application/json"],
        method = [RequestMethod.DELETE]
    )
    fun deleteUser(
        @ApiParam(
            value = "The name that needs to be deleted",
            required = true
        ) @PathVariable("username") username: String?
    ): ResponseEntity<Void?>

    @ApiOperation(
        value = "Get user by user name",
        nickname = "getUserByName",
        notes = "",
        response = User::class,
        tags = ["user"]
    )
    @ApiResponses(
        value = [ApiResponse(
            code = 200,
            message = "successful operation",
            response = User::class
        ), ApiResponse(code = 400, message = "Invalid username supplied"), ApiResponse(
            code = 404,
            message = "User not found"
        )]
    )
    @RequestMapping(
        value = ["/user/{username}"],
        produces = ["application/xml", "application/json"],
        method = [RequestMethod.GET]
    )
    fun getUserByName(
        @ApiParam(
            value = "The name that needs to be fetched. Use user1 for testing. ",
            required = true
        ) @PathVariable("username") username: String?
    ): ResponseEntity<User?>

    @ApiOperation(
        value = "Logs user into the system",
        nickname = "loginUser",
        notes = "",
        response = String::class,
        tags = ["user"]
    )
    @ApiResponses(
        value = [ApiResponse(
            code = 200,
            message = "successful operation",
            response = String::class
        ), ApiResponse(code = 400, message = "Invalid username/password supplied")]
    )
    @RequestMapping(
        value = ["/user/login"],
        produces = ["application/xml", "application/json"],
        method = [RequestMethod.GET]
    )
    fun loginUser(
        @NotNull @ApiParam(
            value = "The user name for login",
            required = true
        ) @Valid @RequestParam(value = "username", required = true) username: String?,
        @NotNull @ApiParam(
            value = "The password for login in clear text",
            required = true
        ) @Valid @RequestParam(value = "password", required = true) password: String?
    ): ResponseEntity<String?>

    @ApiOperation(
        value = "Logs out current logged in user session",
        nickname = "logoutUser",
        notes = "",
        tags = ["user"]
    )
    @ApiResponses(value = [ApiResponse(code = 200, message = "successful operation")])
    @RequestMapping(
        value = ["/user/logout"],
        produces = ["application/xml", "application/json"],
        method = [RequestMethod.GET]
    )
    fun logoutUser(): ResponseEntity<Void?>

    @ApiOperation(
        value = "Updated user",
        nickname = "updateUser",
        notes = "This can only be done by the logged in user.",
        tags = ["user"]
    )
    @ApiResponses(
        value = [ApiResponse(code = 400, message = "Invalid user supplied"), ApiResponse(
            code = 404,
            message = "User not found"
        )]
    )
    @RequestMapping(
        value = ["/user/{username}"],
        produces = ["application/xml", "application/json"],
        method = [RequestMethod.PUT]
    )
    fun updateUser(
        @ApiParam(
            value = "name that need to be updated",
            required = true
        ) @PathVariable("username") username: String?,
        @ApiParam(value = "Updated user object", required = true) @Valid @RequestBody body: User?
    ): ResponseEntity<Void?>
}