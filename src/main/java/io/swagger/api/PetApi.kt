/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api

import io.swagger.annotations.Authorization
import io.swagger.annotations.AuthorizationScope
import javax.validation.constraints.NotNull

@Generated(value = ["io.swagger.codegen.languages.SpringCodegen"], date = "2022-06-30T07:35:56.931Z")
@Validated
@Api(value = "pet", description = "the pet API")
@RequestMapping(value = ["/v2"])
interface PetApi {
    @ApiOperation(
        value = "Add a new pet to the store",
        nickname = "addPet",
        notes = "",
        authorizations = [Authorization(
            value = "petstore_auth",
            scopes = [AuthorizationScope(
                scope = "write:pets",
                description = "modify pets in your account"
            ), AuthorizationScope(scope = "read:pets", description = "read your pets")]
        )],
        tags = ["pet"]
    )
    @ApiResponses(value = [ApiResponse(code = 405, message = "Invalid input")])
    @RequestMapping(
        value = ["/pet"],
        produces = ["application/xml", "application/json"],
        consumes = ["application/json", "application/xml"],
        method = [RequestMethod.POST]
    )
    fun addPet(
        @ApiParam(
            value = "Pet object that needs to be added to the store",
            required = true
        ) @Valid @RequestBody body: Pet?
    ): ResponseEntity<Void?>

    @ApiOperation(
        value = "Deletes a pet",
        nickname = "deletePet",
        notes = "",
        authorizations = [Authorization(
            value = "petstore_auth",
            scopes = [AuthorizationScope(
                scope = "write:pets",
                description = "modify pets in your account"
            ), AuthorizationScope(scope = "read:pets", description = "read your pets")]
        )],
        tags = ["pet"]
    )
    @ApiResponses(
        value = [ApiResponse(code = 400, message = "Invalid ID supplied"), ApiResponse(
            code = 404,
            message = "Pet not found"
        )]
    )
    @RequestMapping(
        value = ["/pet/{petId}"],
        produces = ["application/xml", "application/json"],
        method = [RequestMethod.DELETE]
    )
    fun deletePet(
        @ApiParam(value = "Pet id to delete", required = true) @PathVariable("petId") petId: Long?,
        @ApiParam(value = "") @RequestHeader(value = "api_key", required = false) apiKey: String?
    ): ResponseEntity<Void?>

    @ApiOperation(
        value = "Finds Pets by status",
        nickname = "findPetsByStatus",
        notes = "Multiple status values can be provided with comma separated strings",
        response = Pet::class,
        responseContainer = "List",
        authorizations = [Authorization(
            value = "petstore_auth",
            scopes = [AuthorizationScope(
                scope = "write:pets",
                description = "modify pets in your account"
            ), AuthorizationScope(scope = "read:pets", description = "read your pets")]
        )],
        tags = ["pet"]
    )
    @ApiResponses(
        value = [ApiResponse(
            code = 200,
            message = "successful operation",
            response = Pet::class,
            responseContainer = "List"
        ), ApiResponse(code = 400, message = "Invalid status value")]
    )
    @RequestMapping(
        value = ["/pet/findByStatus"],
        produces = ["application/xml", "application/json"],
        method = [RequestMethod.GET]
    )
    fun findPetsByStatus(
        @NotNull @ApiParam(
            value = "Status values that need to be considered for filter",
            required = true,
            allowableValues = "available, pending, sold"
        ) @Valid @RequestParam(value = "status", required = true) status: List<String?>?
    ): ResponseEntity<List<Pet?>?>

    @ApiOperation(
        value = "Finds Pets by tags",
        nickname = "findPetsByTags",
        notes = "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.",
        response = Pet::class,
        responseContainer = "List",
        authorizations = [Authorization(
            value = "petstore_auth",
            scopes = [AuthorizationScope(
                scope = "write:pets",
                description = "modify pets in your account"
            ), AuthorizationScope(scope = "read:pets", description = "read your pets")]
        )],
        tags = ["pet"]
    )
    @ApiResponses(
        value = [ApiResponse(
            code = 200,
            message = "successful operation",
            response = Pet::class,
            responseContainer = "List"
        ), ApiResponse(code = 400, message = "Invalid tag value")]
    )
    @RequestMapping(
        value = ["/pet/findByTags"],
        produces = ["application/xml", "application/json"],
        method = [RequestMethod.GET]
    )
    fun findPetsByTags(
        @NotNull @ApiParam(
            value = "Tags to filter by",
            required = true
        ) @Valid @RequestParam(value = "tags", required = true) tags: List<String?>?
    ): ResponseEntity<List<Pet?>?>

    @ApiOperation(
        value = "Find pet by ID",
        nickname = "getPetById",
        notes = "Returns a single pet",
        response = Pet::class,
        authorizations = [Authorization(value = "api_key")],
        tags = ["pet"]
    )
    @ApiResponses(
        value = [ApiResponse(
            code = 200,
            message = "successful operation",
            response = Pet::class
        ), ApiResponse(code = 400, message = "Invalid ID supplied"), ApiResponse(code = 404, message = "Pet not found")]
    )
    @RequestMapping(
        value = ["/pet/{petId}"],
        produces = ["application/xml", "application/json"],
        method = [RequestMethod.GET]
    )
    fun getPetById(
        @ApiParam(
            value = "ID of pet to return",
            required = true
        ) @PathVariable("petId") petId: Long?
    ): ResponseEntity<Pet?>

    @ApiOperation(
        value = "Update an existing pet",
        nickname = "updatePet",
        notes = "",
        authorizations = [Authorization(
            value = "petstore_auth",
            scopes = [AuthorizationScope(
                scope = "write:pets",
                description = "modify pets in your account"
            ), AuthorizationScope(scope = "read:pets", description = "read your pets")]
        )],
        tags = ["pet"]
    )
    @ApiResponses(
        value = [ApiResponse(code = 400, message = "Invalid ID supplied"), ApiResponse(
            code = 404,
            message = "Pet not found"
        ), ApiResponse(code = 405, message = "Validation exception")]
    )
    @RequestMapping(
        value = ["/pet"],
        produces = ["application/xml", "application/json"],
        consumes = ["application/json", "application/xml"],
        method = [RequestMethod.PUT]
    )
    fun updatePet(
        @ApiParam(
            value = "Pet object that needs to be added to the store",
            required = true
        ) @Valid @RequestBody body: Pet?
    ): ResponseEntity<Void?>

    @ApiOperation(
        value = "Updates a pet in the store with form data",
        nickname = "updatePetWithForm",
        notes = "",
        authorizations = [Authorization(
            value = "petstore_auth",
            scopes = [AuthorizationScope(
                scope = "write:pets",
                description = "modify pets in your account"
            ), AuthorizationScope(scope = "read:pets", description = "read your pets")]
        )],
        tags = ["pet"]
    )
    @ApiResponses(value = [ApiResponse(code = 405, message = "Invalid input")])
    @RequestMapping(
        value = ["/pet/{petId}"],
        produces = ["application/xml", "application/json"],
        consumes = ["application/x-www-form-urlencoded"],
        method = [RequestMethod.POST]
    )
    fun updatePetWithForm(
        @ApiParam(
            value = "ID of pet that needs to be updated",
            required = true
        ) @PathVariable("petId") petId: Long?,
        @ApiParam(value = "Updated name of the pet") @RequestParam(
            value = "name",
            required = false
        ) name: String?,
        @ApiParam(value = "Updated status of the pet") @RequestParam(
            value = "status",
            required = false
        ) status: String?
    ): ResponseEntity<Void?>

    @ApiOperation(
        value = "uploads an image",
        nickname = "uploadFile",
        notes = "",
        response = ModelApiResponse::class,
        authorizations = [Authorization(
            value = "petstore_auth",
            scopes = [AuthorizationScope(
                scope = "write:pets",
                description = "modify pets in your account"
            ), AuthorizationScope(scope = "read:pets", description = "read your pets")]
        )],
        tags = ["pet"]
    )
    @ApiResponses(
        value = [ApiResponse(
            code = 200,
            message = "successful operation",
            response = ModelApiResponse::class
        )]
    )
    @RequestMapping(
        value = ["/pet/{petId}/uploadImage"],
        produces = ["application/json"],
        consumes = ["multipart/form-data"],
        method = [RequestMethod.POST]
    )
    fun uploadFile(
        @ApiParam(value = "ID of pet to update", required = true) @PathVariable("petId") petId: Long?,
        @ApiParam(value = "Additional data to pass to server") @RequestParam(
            value = "additionalMetadata",
            required = false
        ) additionalMetadata: String?,
        @ApiParam(value = "file to upload") @Valid @RequestPart(
            value = "file",
            required = false
        ) file: MultipartFile?
    ): ResponseEntity<ModelApiResponse?>
}